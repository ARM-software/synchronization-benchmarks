# Copyright (c) 2018, ARM Limited. All rights reserved.
#
# SPDX-License-Identifier:    BSD-3-Clause
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# Neither the name of ARM Limited nor the names of its contributors may be used
# to endorse or promote products derived from this software without specific
# prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of this project.


## Global Settings
globalcfg:
    execdir: /tmp/synchronization-benchmarks/benchmarks/lockhammer/build
    logfile: /tmp/lockhammer.csv

## Sweep Test Settings
#
# Common assumptions for sweeptest:
# CPU Frequency = 2GHz
# CPU Cycle = 0.5ns
# Remote DRAM (x86_64 or aarch64, NUMA) = 100ns ~ 300ns
# Page Fault (4KB, x86_64) = 2000 cycles = 1000ns
# Therefore we set critical section delay (-c) to 0ns, 200ns and 1000ns
# We also set post critical section delay (-p) to 5x of (-c) value
# By default, sweeptest will sweep sweepargu (-t) from 1 to max core count
#
##
sweeptest:
    enabled: False
    safemode: False
    workload:
        - lh_cas_event_mutex
        - lh_cas_lockref
        - lh_cas_rw_lock
        - lh_empty
        - lh_event_mutex
        - lh_hybrid_spinlock
        - lh_hybrid_spinlock_fastdequeue
        - lh_incdec_refcount
        - lh_jvm_objectmonitor
        - lh_osq_lock
        - lh_queued_spinlock
        - lh_swap_mutex
        - lh_tbb_spin_rw_mutex
        - lh_ticket_spinlock
    repeat: 7
    sweepargu: t
    argumax: 0
    arguoffset: 0
    skipsince: 48
    skipstep: 8
    argulist:
        - a: 5000
          c: 0ns
          p: 0ns
        - a: 5000
          c: 1000ns
          p: 0ns
        - a: 5000
          c: 200ns
          p: 1000ns
        - a: 5000
          c: 1000ns
          p: 5000ns

## Unittest Settings
#
# Common assumptions for unittest:
# Only cover functional correctness, use as least time as possible
# Normal runtime should be around 1 minute
#
##
unittest:
    enabled: True
    safemode: True
    testcase:
        - cmd:
            - lh_cas_event_mutex
            - lh_cas_lockref
            - lh_cas_rw_lock
            - lh_empty
            - lh_event_mutex
            - lh_incdec_refcount
            - lh_jvm_objectmonitor
            - lh_osq_lock
            - lh_queued_spinlock
            - lh_swap_mutex
            - lh_tbb_spin_rw_mutex
            - lh_ticket_spinlock
          cmd_aarch64: [lh_hybrid_spinlock, lh_hybrid_spinlock_fastdequeue]
          cmd_x86_64:
          t: 0
          a: 100
          c: [0ns, 50ns]
          p: [0ns, 50ns]

        - cmd: lh_osq_lock
          t: 0
          a: 100
          c: 50ns
          p: 0ns
          extra:
              u: 10
              s: 2

        - cmd: lh_tbb_spin_rw_mutex
          t: 0
          a: 100
          c: 50ns
          p: 0ns
          extra:
              r: 4
              m: 1
